<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode:斐波那契数列</title>
      <link href="/2022/030255399.html"/>
      <url>/2022/030255399.html</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode1：斐波那契数列"><a href="#Leetcode1：斐波那契数列" class="headerlink" title="Leetcode1：斐波那契数列"></a>Leetcode1：斐波那契数列</h1><p>题目：<br>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：</p><p>F(0) = 0,&nbsp; &nbsp;F(1)&nbsp;= 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><p>&nbsp;</p><p>示例 1：<br>输入：n = 2<br>输出：1</p><p>示例 2：<br>输入：n = 5<br>输出：5&nbsp;</p><p>提示：<br>0 &lt;= n &lt;= 100</p><h3 id="解一"><a href="#解一" class="headerlink" title="解一"></a>解一</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {number} */</span><span class="token keyword">var</span> fib <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">执行用时：<span class="token number">48</span> ms<span class="token punctuation">,</span> 在所有 JavaScript 提交中击败了<span class="token number">99.59</span><span class="token operator">%</span>的用户内存消耗：<span class="token number">41.1</span> MB<span class="token punctuation">,</span> 在所有 JavaScript 提交中击败了<span class="token number">10.12</span><span class="token operator">%</span>的用户通过测试用例：<span class="token number">51</span> <span class="token operator">/</span> <span class="token number">51</span></code></pre><h3 id="解二"><a href="#解二" class="headerlink" title="解二"></a>解二</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {number} */</span><span class="token keyword">var</span> fib <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>num2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>num3   <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> num3 <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> num3 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        num3 <span class="token operator">=</span><span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span>        num1 <span class="token operator">=</span> num2        num2 <span class="token operator">=</span> num3    <span class="token punctuation">}</span>  <span class="token keyword">return</span> num3<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">执行用时：<span class="token number">48</span> ms<span class="token punctuation">,</span> 在所有 JavaScript 提交中击败了<span class="token number">99.59</span><span class="token operator">%</span>的用户内存消耗：<span class="token number">40.9</span> MB<span class="token punctuation">,</span> 在所有 JavaScript 提交中击败了<span class="token number">24.42</span><span class="token operator">%</span>的用户通过测试用例：<span class="token number">51</span> <span class="token operator">/</span> <span class="token number">51</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode537:复数乘法</title>
      <link href="/2022/030144393.html"/>
      <url>/2022/030144393.html</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode537-复数乘法"><a href="#Leetcode537-复数乘法" class="headerlink" title="Leetcode537:复数乘法"></a>Leetcode537:复数乘法</h1><p>题目：<br>复数 可以用字符串表示，遵循 “实部+虚部i” 的形式，并满足下述条件：</p><p>实部 是一个整数，取值范围是 [-100, 100]<br>虚部 也是一个整数，取值范围是 [-100, 100]<br>i2 == -1<br>给你两个字符串表示的复数 num1 和 num2 ，请你遵循复数表示形式，返回表示它们乘积的字符串。</p><p>示例 1：<br>输入：num1 = “1+1i”, num2 = “1+1i”<br>输出：”0+2i”<br>解释：(1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。</p><p>示例 2：<br>输入：num1 = “1+-1i”, num2 = “1+-1i”<br>输出：”0+-2i”<br>解释：(1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。 &nbsp;</p><p>提示：<br>num1 和 num2 都是有效的复数表示。</p><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {string} num1 * @param {string} num2 * @return {string} */</span><span class="token keyword">var</span> complexNumberMultiply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> t1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> str1 <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> t2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> t3 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> str2 <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> t4 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> t1 <span class="token operator">*</span>t3<span class="token operator">-</span>t2 <span class="token operator">*</span>t4 <span class="token operator">+</span> <span class="token string">'+'</span> <span class="token operator">+</span><span class="token punctuation">(</span>t2 <span class="token operator">*</span>t3<span class="token operator">+</span>t1 <span class="token operator">*</span>t4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'i'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode999:可以进一步捕获的棋子数</title>
      <link href="/2022/030144363.html"/>
      <url>/2022/030144363.html</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode999-可以进一步捕获的棋子数"><a href="#Leetcode999-可以进一步捕获的棋子数" class="headerlink" title="Leetcode999:可以进一步捕获的棋子数"></a>Leetcode999:可以进一步捕获的棋子数</h1><p>题目：在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 ‘R’ 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），分别用字符 ‘.’，’B’ 和 ‘p’ 表示。不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。</p><p>车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：</p><p>棋手选择主动停下来。<br>棋子因到达棋盘的边缘而停下。<br>棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。<br>车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。<br>你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。</p><p>&nbsp;<br>示例 1：<br>输入：[[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”R”,”.”,”.”,”.”,”p”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”]]<br>输出：3<br>解释：<br>在本例中，车能够捕获所有的卒。</p><p>示例 2：<br>输入：[[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”p”,”p”,”p”,”p”,”p”,”.”,”.”],[“.”,”p”,”p”,”B”,”p”,”p”,”.”,”.”],[“.”,”p”,”B”,”R”,”B”,”p”,”.”,”.”],[“.”,”p”,”p”,”B”,”p”,”p”,”.”,”.”],[“.”,”p”,”p”,”p”,”p”,”p”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”]]<br>输出：0<br>解释：<br>象阻止了车捕获任何卒。</p><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {character[][]} board * @return {number} */</span><span class="token keyword">var</span> numRookCaptures <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"R"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span> y <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {character[][]} board * @return {number} */</span><span class="token keyword">var</span> numRookCaptures <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'R'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">var</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span>              <span class="token keyword">var</span> j <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'R'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span> y <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>num <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span> x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"B"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>num <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode1556:千位分隔数</title>
      <link href="/2022/030144343.html"/>
      <url>/2022/030144343.html</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode1556-千位分隔数"><a href="#Leetcode1556-千位分隔数" class="headerlink" title="Leetcode1556:千位分隔数"></a>Leetcode1556:千位分隔数</h1><p>题目：给你一个整数&nbsp;n，请你每隔三位添加点（即 “.” 符号）作为千位分隔符，并将结果以字符串格式返回。</p><p>示例 1：<br>输入：n = 987<br>输出：”987”</p><p>示例 2：<br>输入：n = 123456789<br>输出：”123.456.789”</p><h3 id="解一"><a href="#解一" class="headerlink" title="解一"></a>解一</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {string} */</span><span class="token keyword">var</span> thousandSeparator <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\B(?=(\d{3})+(?!\d))/g</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="解二"><a href="#解二" class="headerlink" title="解二"></a>解二</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {string} */</span><span class="token keyword">var</span> thousandSeparator <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="解三"><a href="#解三" class="headerlink" title="解三"></a>解三</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number} n * @return {string} */</span><span class="token keyword">var</span> thousandSeparator <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/,/g</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实时时间</title>
      <link href="/2022/022644788.html"/>
      <url>/2022/022644788.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端实时时间"><a href="#前端实时时间" class="headerlink" title="前端实时时间"></a>前端实时时间</h1><p>需求：获取实时时间</p><h3 id="暴露获取时间函数"><a href="#暴露获取时间函数" class="headerlink" title="暴露获取时间函数"></a>暴露获取时间函数</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">/**     *  处理时间     **/</span>   <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(myDate)</span>    <span class="token keyword">let</span> wk <span class="token operator">=</span> myDate<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> yy <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>myDate<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mm <span class="token operator">=</span> myDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> dd <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>      myDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> myDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> myDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> hou <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>      myDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> myDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> myDate<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>      myDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span>        <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> myDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> myDate<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sec <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>      myDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span>        <span class="token operator">?</span> <span class="token string">"0"</span> <span class="token operator">+</span> myDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> myDate<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> weeks <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">"星期日"</span><span class="token punctuation">,</span>      <span class="token string">"星期一"</span><span class="token punctuation">,</span>      <span class="token string">"星期二"</span><span class="token punctuation">,</span>      <span class="token string">"星期三"</span><span class="token punctuation">,</span>      <span class="token string">"星期四"</span><span class="token punctuation">,</span>      <span class="token string">"星期五"</span><span class="token punctuation">,</span>      <span class="token string">"星期六"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> nowweek <span class="token operator">=</span> weeks<span class="token punctuation">[</span>wk<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> nowDate <span class="token operator">=</span> yy <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> mm <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> dd<span class="token punctuation">;</span>    <span class="token keyword">let</span> nowTime <span class="token operator">=</span> hou <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> min <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> sec<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>nowDate<span class="token punctuation">,</span>nowTime<span class="token punctuation">,</span>nowweek<span class="token punctuation">]</span>  <span class="token punctuation">}</span></code></pre><h3 id="调用即可"><a href="#调用即可" class="headerlink" title="调用即可"></a>调用即可</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/**     *  获取时间     **/</span>    <span class="token function">setNowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">nowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nowDate <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nowTime <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>nowWeek <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="记得离开页面销毁"><a href="#记得离开页面销毁" class="headerlink" title="记得离开页面销毁"></a>记得离开页面销毁</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> time </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端实现语音识别、语音翻译</title>
      <link href="/2022/022532962.html"/>
      <url>/2022/022532962.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端实现语音识别、语音翻译"><a href="#前端实现语音识别、语音翻译" class="headerlink" title="前端实现语音识别、语音翻译"></a>前端实现语音识别、语音翻译</h1><p>需求：用户说一段话，转译英文</p><h2 id="一、录音"><a href="#一、录音" class="headerlink" title="一、录音"></a>一、录音</h2><h3 id="使用的是js-audio-recorder"><a href="#使用的是js-audio-recorder" class="headerlink" title="使用的是js-audio-recorder"></a>使用的是js-audio-recorder</h3><p>另我这个里面有些东西是不需要的，因为我有个录音波浪图的功能，大家可忽略</p><pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">let</span> recorder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Recorder</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  sampleBits<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 采样位数，支持 8 或 16，默认是16</span>  sampleRate<span class="token punctuation">:</span> <span class="token number">16000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 采样率，支持 11025、16000、22050、24000、44100、48000</span>  numChannels<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 声道，支持 1 或 2， 默认是1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  录音的具体操作功能     * */</span>    <span class="token comment" spellcheck="true">// 开始录音</span>    <span class="token function">startRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      recorder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开始绘制图片</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 结束录音</span>    <span class="token function">stopRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      recorder<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>drawRecordId <span class="token operator">&amp;&amp;</span> <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>drawRecordId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>drawRecordId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 录音播放</span>    <span class="token function">playRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      recorder<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绘制波浪图</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 停止录音播放</span>    <span class="token function">stopPlayRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      recorder<span class="token punctuation">.</span><span class="token function">stopPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 销毁录音</span>    <span class="token function">destroyRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      recorder<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        recorder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drawRecordId <span class="token operator">&amp;&amp;</span> <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>drawRecordId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drawRecordId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="二、blobtoBase64"><a href="#二、blobtoBase64" class="headerlink" title="二、blobtoBase64"></a>二、blobtoBase64</h2><p>因百度ai接口需要base64格式编码，需转一下格式</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/**     * blob二进制 to base64     **/</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">blobToBase64</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileReader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// readAsDataURL</span>        fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileReader<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'blobToBase64 error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="三、调用百度语音识别接口"><a href="#三、调用百度语音识别接口" class="headerlink" title="三、调用百度语音识别接口"></a>三、调用百度语音识别接口</h2><p>先简单处理一下跨域问题</p><pre class=" language-javascript"><code class="language-javascript">      <span class="token string">'/oauth'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'https://aip.baidubce.com'</span><span class="token punctuation">,</span>        secure<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/oauth'</span> <span class="token punctuation">:</span> <span class="token string">'/oauth'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>识别接口里有个参数token，所以需先获取token</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** *  处理录音识别 **/</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/api/request'</span><span class="token keyword">const</span> tokenUrl <span class="token operator">=</span> <span class="token string">"/oauth/2.0/token"</span><span class="token punctuation">;</span> <span class="token keyword">const</span> urlInfo <span class="token operator">=</span> <span class="token string">"/server_api"</span><span class="token punctuation">;</span><span class="token keyword">const</span> API_KEY <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自己去官网上开通服务，拿到 API_KEY</span><span class="token keyword">const</span> SECRET_KEY <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自己去官网上开通服务，拿到  SECRET_KEY</span><span class="token keyword">const</span> myurl <span class="token operator">=</span>  tokenUrl <span class="token operator">+</span>  <span class="token string">"?grant_type=client_credentials"</span> <span class="token operator">+</span>  <span class="token string">"&amp;client_id="</span> <span class="token operator">+</span>  API_KEY <span class="token operator">+</span>  <span class="token string">"&amp;client_secret="</span> <span class="token operator">+</span>  SECRET_KEY<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">identify</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>myurl<span class="token punctuation">)</span>  <span class="token keyword">let</span> access_token <span class="token operator">=</span> res<span class="token punctuation">.</span>access_token<span class="token punctuation">;</span>    <span class="token keyword">let</span> speech <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"data:audio/wav;base64,"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token punctuation">{</span>      format<span class="token punctuation">:</span> <span class="token string">"wav"</span><span class="token punctuation">,</span>      rate<span class="token punctuation">:</span> <span class="token number">16000</span><span class="token punctuation">,</span>      dev_pid<span class="token punctuation">:</span> <span class="token number">1537</span><span class="token punctuation">,</span>      channel<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      token<span class="token punctuation">:</span> access_token<span class="token punctuation">,</span>      cuid<span class="token punctuation">:</span> <span class="token string">"baidu_workshop"</span><span class="token punctuation">,</span>      len<span class="token punctuation">:</span> size<span class="token punctuation">,</span>      speech<span class="token punctuation">:</span> speech<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>urlInfo<span class="token punctuation">,</span> formData<span class="token punctuation">)</span>    <span class="token keyword">let</span> basic <span class="token operator">=</span> r<span class="token punctuation">.</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> newBasic <span class="token operator">=</span> basic<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> basic<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newBasic<span class="token punctuation">}</span></code></pre><h2 id="四、调用百度语音翻译接口"><a href="#四、调用百度语音翻译接口" class="headerlink" title="四、调用百度语音翻译接口"></a>四、调用百度语音翻译接口</h2><p>同识别接口差不多，解决跨域问题再请求，不对，应该是先请求出现跨域问题再解决。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** *  处理语音翻译 **/</span> <span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span> <span class="token keyword">import</span> md5 <span class="token keyword">from</span> <span class="token string">"js-md5"</span><span class="token punctuation">;</span> <span class="token keyword">const</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> appid <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去官网获取</span> <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去官网获取</span> <span class="token keyword">let</span> salt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"/api/trans/vip/translate"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> <span class="token keyword">from</span> <span class="token operator">=</span> <span class="token string">"zh"</span><span class="token punctuation">;</span> <span class="token keyword">let</span> to <span class="token operator">=</span> <span class="token string">"en"</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">translate</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> query <span class="token operator">=</span> word<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 多个query可以用\n连接  如 query='apple\norange\nbanana\npear'</span>    <span class="token keyword">let</span> str1 <span class="token operator">=</span> appid <span class="token operator">+</span> query <span class="token operator">+</span> salt <span class="token operator">+</span> key<span class="token punctuation">;</span>    <span class="token keyword">let</span> sign <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> myurl <span class="token operator">=</span>      url <span class="token operator">+</span>      <span class="token string">"?appid="</span> <span class="token operator">+</span>      appid <span class="token operator">+</span>      <span class="token string">"&amp;from="</span> <span class="token operator">+</span>      <span class="token keyword">from</span> <span class="token operator">+</span>      <span class="token string">"&amp;to="</span> <span class="token operator">+</span>      to <span class="token operator">+</span>      <span class="token string">"&amp;salt="</span> <span class="token operator">+</span>      salt <span class="token operator">+</span>      <span class="token string">"&amp;sign="</span> <span class="token operator">+</span>      sign<span class="token punctuation">;</span>    form<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>myurl<span class="token punctuation">,</span> form<span class="token punctuation">)</span>    <span class="token keyword">let</span> prompt <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>trans_result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dst<span class="token punctuation">;</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"prompt"</span><span class="token punctuation">,</span> prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prompt  <span class="token punctuation">}</span>  </code></pre><pre class=" language-javascript"><code class="language-javascript">      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://api.fanyi.baidu.com'</span><span class="token punctuation">,</span>        secure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">'^/api'</span> <span class="token punctuation">:</span> <span class="token string">'/api'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span></code></pre><h2 id="三、调用"><a href="#三、调用" class="headerlink" title="三、调用"></a>三、调用</h2><p>调用即可 word为中文，prompt为英文</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">/**     *  处理录音识别,语音翻译     **/</span>    <span class="token keyword">async</span> <span class="token function">identify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> file <span class="token operator">=</span> recorder<span class="token punctuation">.</span><span class="token function">getWAVBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> size <span class="token operator">=</span> file<span class="token punctuation">.</span>size<span class="token punctuation">;</span>      <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">blobToBase64</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> word <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">identify</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">translate</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AI生成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语音识别 </tag>
            
            <tag> 语音翻译 </tag>
            
            <tag> AI生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端下载base64格式视频</title>
      <link href="/2022/022428492.html"/>
      <url>/2022/022428492.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端下载base64格式视频"><a href="#前端下载base64格式视频" class="headerlink" title="前端下载base64格式视频"></a>前端下载base64格式视频</h1><p>需求：后台传回base64格式视频，前端下载视频</p><h2 id="一、base64转blob"><a href="#一、base64转blob" class="headerlink" title="一、base64转blob"></a>一、base64转blob</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** *  base64 to Blob **/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">base64toBlob</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">,</span> contentType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> sliceSize <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> byteCharacters <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> byteArrays <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>    <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> byteCharacters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> offset <span class="token operator">+</span><span class="token operator">=</span> sliceSize  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> slice <span class="token operator">=</span> byteCharacters<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> offset <span class="token operator">+</span> sliceSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> byteNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>slice<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slice<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      byteNumbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> slice<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> byteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>byteNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span>    byteArrays<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>byteArrays<span class="token punctuation">,</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> contentType  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> blob<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二、下载blob视频"><a href="#二、下载blob视频" class="headerlink" title="二、下载blob视频"></a>二、下载blob视频</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** *  下载视频 **/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">download</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"download"</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> elink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    elink<span class="token punctuation">.</span>download <span class="token operator">=</span> filename<span class="token punctuation">;</span>    elink<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    elink<span class="token punctuation">.</span>href <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>elink<span class="token punctuation">)</span><span class="token punctuation">;</span>    elink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>elink<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elink<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用一下就哦可了</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">async</span> <span class="token function">downloadVideo</span><span class="token punctuation">(</span>cache_key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">getAnimation</span><span class="token punctuation">(</span>cache_key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> filecontent <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>filecontent<span class="token punctuation">;</span>      <span class="token keyword">let</span> filename <span class="token operator">=</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>filename<span class="token punctuation">;</span>      <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token function">base64toBlob</span><span class="token punctuation">(</span>filecontent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">download</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end 完成下载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> base64 </tag>
            
            <tag> blob </tag>
            
            <tag> 下载视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片涂鸦</title>
      <link href="/2022/022359956.html"/>
      <url>/2022/022359956.html</url>
      
        <content type="html"><![CDATA[<h1 id="图片涂鸦"><a href="#图片涂鸦" class="headerlink" title="图片涂鸦"></a>图片涂鸦</h1><p>需求：在图片上绘画</p><p>之前接到这个需求，不会就去网上找，发现了这个，亲测可用，挺有意思的，所以今天分享给大家</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"tui-image-editor"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"uploadImg"</span><span class="token operator">></span>完成并上传<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token string">"tui-image-editor/dist/tui-image-editor.css"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"tui-color-picker/dist/tui-color-picker.css"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ImageEditor <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"tui-image-editor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> locale_zh <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// override default English locale to your custom</span>  Crop<span class="token punctuation">:</span> <span class="token string">"裁剪"</span><span class="token punctuation">,</span>  DeleteAll<span class="token punctuation">:</span> <span class="token string">"全部删除"</span><span class="token punctuation">,</span>  Delete<span class="token punctuation">:</span> <span class="token string">"删除"</span><span class="token punctuation">,</span>  Undo<span class="token punctuation">:</span> <span class="token string">"撤销"</span><span class="token punctuation">,</span>  Redo<span class="token punctuation">:</span> <span class="token string">"反撤销"</span><span class="token punctuation">,</span>  Reset<span class="token punctuation">:</span> <span class="token string">"重置"</span><span class="token punctuation">,</span>  Flip<span class="token punctuation">:</span> <span class="token string">"镜像"</span><span class="token punctuation">,</span>  Rotate<span class="token punctuation">:</span> <span class="token string">"旋转"</span><span class="token punctuation">,</span>  Draw<span class="token punctuation">:</span> <span class="token string">"画"</span><span class="token punctuation">,</span>  Shape<span class="token punctuation">:</span> <span class="token string">"形状标注"</span><span class="token punctuation">,</span>  Icon<span class="token punctuation">:</span> <span class="token string">"图标标注"</span><span class="token punctuation">,</span>  Text<span class="token punctuation">:</span> <span class="token string">"文字标注"</span><span class="token punctuation">,</span>  Mask<span class="token punctuation">:</span> <span class="token string">"遮罩"</span><span class="token punctuation">,</span>  Filter<span class="token punctuation">:</span> <span class="token string">"滤镜"</span><span class="token punctuation">,</span>  Bold<span class="token punctuation">:</span> <span class="token string">"加粗"</span><span class="token punctuation">,</span>  Italic<span class="token punctuation">:</span> <span class="token string">"斜体"</span><span class="token punctuation">,</span>  Underline<span class="token punctuation">:</span> <span class="token string">"下划线"</span><span class="token punctuation">,</span>  Left<span class="token punctuation">:</span> <span class="token string">"左对齐"</span><span class="token punctuation">,</span>  Center<span class="token punctuation">:</span> <span class="token string">"居中"</span><span class="token punctuation">,</span>  Right<span class="token punctuation">:</span> <span class="token string">"右对齐"</span><span class="token punctuation">,</span>  Color<span class="token punctuation">:</span> <span class="token string">"颜色"</span><span class="token punctuation">,</span>  <span class="token string">"Text size"</span><span class="token punctuation">:</span> <span class="token string">"字体大小"</span><span class="token punctuation">,</span>  Custom<span class="token punctuation">:</span> <span class="token string">"自定义"</span><span class="token punctuation">,</span>  Square<span class="token punctuation">:</span> <span class="token string">"正方形"</span><span class="token punctuation">,</span>  Apply<span class="token punctuation">:</span> <span class="token string">"应用"</span><span class="token punctuation">,</span>  Cancel<span class="token punctuation">:</span> <span class="token string">"取消"</span><span class="token punctuation">,</span>  <span class="token string">"Flip X"</span><span class="token punctuation">:</span> <span class="token string">"X 轴"</span><span class="token punctuation">,</span>  <span class="token string">"Flip Y"</span><span class="token punctuation">:</span> <span class="token string">"Y 轴"</span><span class="token punctuation">,</span>  Range<span class="token punctuation">:</span> <span class="token string">"区间"</span><span class="token punctuation">,</span>  Stroke<span class="token punctuation">:</span> <span class="token string">"描边"</span><span class="token punctuation">,</span>  Fill<span class="token punctuation">:</span> <span class="token string">"填充"</span><span class="token punctuation">,</span>  Circle<span class="token punctuation">:</span> <span class="token string">"圆"</span><span class="token punctuation">,</span>  Triangle<span class="token punctuation">:</span> <span class="token string">"三角"</span><span class="token punctuation">,</span>  Rectangle<span class="token punctuation">:</span> <span class="token string">"矩形"</span><span class="token punctuation">,</span>  Free<span class="token punctuation">:</span> <span class="token string">"曲线"</span><span class="token punctuation">,</span>  Straight<span class="token punctuation">:</span> <span class="token string">"直线"</span><span class="token punctuation">,</span>  Arrow<span class="token punctuation">:</span> <span class="token string">"箭头"</span><span class="token punctuation">,</span>  <span class="token string">"Arrow-2"</span><span class="token punctuation">:</span> <span class="token string">"箭头2"</span><span class="token punctuation">,</span>  <span class="token string">"Arrow-3"</span><span class="token punctuation">:</span> <span class="token string">"箭头3"</span><span class="token punctuation">,</span>  <span class="token string">"Star-1"</span><span class="token punctuation">:</span> <span class="token string">"星星1"</span><span class="token punctuation">,</span>  <span class="token string">"Star-2"</span><span class="token punctuation">:</span> <span class="token string">"星星2"</span><span class="token punctuation">,</span>  Polygon<span class="token punctuation">:</span> <span class="token string">"多边形"</span><span class="token punctuation">,</span>  Location<span class="token punctuation">:</span> <span class="token string">"定位"</span><span class="token punctuation">,</span>  Heart<span class="token punctuation">:</span> <span class="token string">"心形"</span><span class="token punctuation">,</span>  Bubble<span class="token punctuation">:</span> <span class="token string">"气泡"</span><span class="token punctuation">,</span>  <span class="token string">"Custom icon"</span><span class="token punctuation">:</span> <span class="token string">"自定义图标"</span><span class="token punctuation">,</span>  <span class="token string">"Load Mask Image"</span><span class="token punctuation">:</span> <span class="token string">"加载蒙层图片"</span><span class="token punctuation">,</span>  Grayscale<span class="token punctuation">:</span> <span class="token string">"灰度"</span><span class="token punctuation">,</span>  Blur<span class="token punctuation">:</span> <span class="token string">"模糊"</span><span class="token punctuation">,</span>  Sharpen<span class="token punctuation">:</span> <span class="token string">"锐化"</span><span class="token punctuation">,</span>  Emboss<span class="token punctuation">:</span> <span class="token string">"浮雕"</span><span class="token punctuation">,</span>  <span class="token string">"Remove White"</span><span class="token punctuation">:</span> <span class="token string">"除去白色"</span><span class="token punctuation">,</span>  Distance<span class="token punctuation">:</span> <span class="token string">"距离"</span><span class="token punctuation">,</span>  Brightness<span class="token punctuation">:</span> <span class="token string">"亮度"</span><span class="token punctuation">,</span>  Noise<span class="token punctuation">:</span> <span class="token string">"噪音"</span><span class="token punctuation">,</span>  <span class="token string">"Color Filter"</span><span class="token punctuation">:</span> <span class="token string">"彩色滤镜"</span><span class="token punctuation">,</span>  Sepia<span class="token punctuation">:</span> <span class="token string">"棕色"</span><span class="token punctuation">,</span>  Sepia2<span class="token punctuation">:</span> <span class="token string">"棕色2"</span><span class="token punctuation">,</span>  Invert<span class="token punctuation">:</span> <span class="token string">"负片"</span><span class="token punctuation">,</span>  Pixelate<span class="token punctuation">:</span> <span class="token string">"像素化"</span><span class="token punctuation">,</span>  Threshold<span class="token punctuation">:</span> <span class="token string">"阈值"</span><span class="token punctuation">,</span>  Tint<span class="token punctuation">:</span> <span class="token string">"色调"</span><span class="token punctuation">,</span>  Multiply<span class="token punctuation">:</span> <span class="token string">"正片叠底"</span><span class="token punctuation">,</span>  Blend<span class="token punctuation">:</span> <span class="token string">"混合色"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// etc...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> customTheme <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// image 坐上角度图片</span>  <span class="token string">"common.bi.image"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在这里换上你喜欢的logo图片</span>  <span class="token string">"common.bisize.width"</span><span class="token punctuation">:</span> <span class="token string">"0px"</span><span class="token punctuation">,</span>  <span class="token string">"common.bisize.height"</span><span class="token punctuation">:</span> <span class="token string">"0px"</span><span class="token punctuation">,</span>  <span class="token string">"common.backgroundImage"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token string">"common.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#f3f4f6"</span><span class="token punctuation">,</span>  <span class="token string">"common.border"</span><span class="token punctuation">:</span> <span class="token string">"1px solid #444"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// header</span>  <span class="token string">"header.backgroundImage"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token string">"header.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#f3f4f6"</span><span class="token punctuation">,</span>  <span class="token string">"header.border"</span><span class="token punctuation">:</span> <span class="token string">"0px"</span><span class="token punctuation">,</span>  <span class="token string">"header.display"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// load button</span>  <span class="token string">"loadButton.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token string">"loadButton.border"</span><span class="token punctuation">:</span> <span class="token string">"1px solid #ddd"</span><span class="token punctuation">,</span>  <span class="token string">"loadButton.color"</span><span class="token punctuation">:</span> <span class="token string">"#222"</span><span class="token punctuation">,</span>  <span class="token string">"loadButton.fontFamily"</span><span class="token punctuation">:</span> <span class="token string">"NotoSans, sans-serif"</span><span class="token punctuation">,</span>  <span class="token string">"loadButton.fontSize"</span><span class="token punctuation">:</span> <span class="token string">"12px"</span><span class="token punctuation">,</span>  <span class="token string">"loadButton.display"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以直接隐藏掉</span>  <span class="token comment" spellcheck="true">// download button</span>  <span class="token string">"downloadButton.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#fdba3b"</span><span class="token punctuation">,</span>  <span class="token string">"downloadButton.border"</span><span class="token punctuation">:</span> <span class="token string">"1px solid #fdba3b"</span><span class="token punctuation">,</span>  <span class="token string">"downloadButton.color"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token string">"downloadButton.fontFamily"</span><span class="token punctuation">:</span> <span class="token string">"NotoSans, sans-serif"</span><span class="token punctuation">,</span>  <span class="token string">"downloadButton.fontSize"</span><span class="token punctuation">:</span> <span class="token string">"12px"</span><span class="token punctuation">,</span>  <span class="token string">"downloadButton.display"</span><span class="token punctuation">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以直接隐藏掉</span>  <span class="token comment" spellcheck="true">// icons default</span>  <span class="token string">"menu.normalIcon.color"</span><span class="token punctuation">:</span> <span class="token string">"#8a8a8a"</span><span class="token punctuation">,</span>  <span class="token string">"menu.activeIcon.color"</span><span class="token punctuation">:</span> <span class="token string">"#555555"</span><span class="token punctuation">,</span>  <span class="token string">"menu.disabledIcon.color"</span><span class="token punctuation">:</span> <span class="token string">"#434343"</span><span class="token punctuation">,</span>  <span class="token string">"menu.hoverIcon.color"</span><span class="token punctuation">:</span> <span class="token string">"#e9e9e9"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.normalIcon.color"</span><span class="token punctuation">:</span> <span class="token string">"#8a8a8a"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.activeIcon.color"</span><span class="token punctuation">:</span> <span class="token string">"#e9e9e9"</span><span class="token punctuation">,</span>  <span class="token string">"menu.iconSize.width"</span><span class="token punctuation">:</span> <span class="token string">"24px"</span><span class="token punctuation">,</span>  <span class="token string">"menu.iconSize.height"</span><span class="token punctuation">:</span> <span class="token string">"24px"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.iconSize.width"</span><span class="token punctuation">:</span> <span class="token string">"32px"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.iconSize.height"</span><span class="token punctuation">:</span> <span class="token string">"32px"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// submenu primary color</span>  <span class="token string">"submenu.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#1e1e1e"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.partition.color"</span><span class="token punctuation">:</span> <span class="token string">"#858585"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// submenu labels</span>  <span class="token string">"submenu.normalLabel.color"</span><span class="token punctuation">:</span> <span class="token string">"#858585"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.normalLabel.fontWeight"</span><span class="token punctuation">:</span> <span class="token string">"lighter"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.activeLabel.color"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token string">"submenu.activeLabel.fontWeight"</span><span class="token punctuation">:</span> <span class="token string">"lighter"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// checkbox style</span>  <span class="token string">"checkbox.border"</span><span class="token punctuation">:</span> <span class="token string">"1px solid #ccc"</span><span class="token punctuation">,</span>  <span class="token string">"checkbox.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// rango style</span>  <span class="token string">"range.pointer.color"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token string">"range.bar.color"</span><span class="token punctuation">:</span> <span class="token string">"#666"</span><span class="token punctuation">,</span>  <span class="token string">"range.subbar.color"</span><span class="token punctuation">:</span> <span class="token string">"#d1d1d1"</span><span class="token punctuation">,</span>  <span class="token string">"range.disabledPointer.color"</span><span class="token punctuation">:</span> <span class="token string">"#414141"</span><span class="token punctuation">,</span>  <span class="token string">"range.disabledBar.color"</span><span class="token punctuation">:</span> <span class="token string">"#282828"</span><span class="token punctuation">,</span>  <span class="token string">"range.disabledSubbar.color"</span><span class="token punctuation">:</span> <span class="token string">"#414141"</span><span class="token punctuation">,</span>  <span class="token string">"range.value.color"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token string">"range.value.fontWeight"</span><span class="token punctuation">:</span> <span class="token string">"lighter"</span><span class="token punctuation">,</span>  <span class="token string">"range.value.fontSize"</span><span class="token punctuation">:</span> <span class="token string">"11px"</span><span class="token punctuation">,</span>  <span class="token string">"range.value.border"</span><span class="token punctuation">:</span> <span class="token string">"1px solid #353535"</span><span class="token punctuation">,</span>  <span class="token string">"range.value.backgroundColor"</span><span class="token punctuation">:</span> <span class="token string">"#151515"</span><span class="token punctuation">,</span>  <span class="token string">"range.title.color"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>  <span class="token string">"range.title.fontWeight"</span><span class="token punctuation">:</span> <span class="token string">"lighter"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// colorpicker style</span>  <span class="token string">"colorpicker.button.border"</span><span class="token punctuation">:</span> <span class="token string">"1px solid #1e1e1e"</span><span class="token punctuation">,</span>  <span class="token string">"colorpicker.title.color"</span><span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'Setting'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      instance<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageEditor</span><span class="token punctuation">(</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#tui-image-editor"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        includeUI<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loadImage<span class="token punctuation">:</span> <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token punctuation">,</span><span class="token comment" spellcheck="true">//在这里替换你的路径就可以了</span>            name<span class="token punctuation">:</span> <span class="token string">"image"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          initMenu<span class="token punctuation">:</span> <span class="token string">"draw"</span><span class="token punctuation">,</span>          menuBarPosition<span class="token punctuation">:</span> <span class="token string">"bottom"</span><span class="token punctuation">,</span>          locale<span class="token punctuation">:</span> locale_zh<span class="token punctuation">,</span>          theme<span class="token punctuation">:</span> customTheme<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"tui-image-editor-main"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">uploadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> base64String <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span>base64String<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/show'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"css"</span> scoped<span class="token operator">></span><span class="token punctuation">.</span>container <span class="token punctuation">{</span>  height<span class="token punctuation">:</span> 95vh<span class="token punctuation">;</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>非原创，找不到原作了，看见请及时联系。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 涂鸦 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome DevTools使用技巧</title>
      <link href="/2022/011428074.html"/>
      <url>/2022/011428074.html</url>
      
        <content type="html"><![CDATA[<h1 id="Chrome-DevTools使用技巧"><a href="#Chrome-DevTools使用技巧" class="headerlink" title="Chrome DevTools使用技巧"></a>Chrome DevTools使用技巧</h1><h2 id="一-Chrome-DevTools-功能简介"><a href="#一-Chrome-DevTools-功能简介" class="headerlink" title="一.Chrome DevTools 功能简介"></a>一.Chrome DevTools 功能简介</h2><p>（九大功能面板）</p><h4 id="（1）Elements元素面板"><a href="#（1）Elements元素面板" class="headerlink" title="（1）Elements元素面板"></a>（1）Elements元素面板</h4><p>​        检查和调整页面，调试DOM,调试CSS</p><h4 id="（2）Network网络面板"><a href="#（2）Network网络面板" class="headerlink" title="（2）Network网络面板"></a>（2）Network网络面板</h4><p>​         调试请求，了解页面静态资源分布，网页性能检测</p><h4 id="（3）Console控制台面板"><a href="#（3）Console控制台面板" class="headerlink" title="（3）Console控制台面板"></a>（3）Console控制台面板</h4><p>​         调试javascript,查看console log日志，交互式代码调试</p><h4 id="（4）Sources源代码资源面板"><a href="#（4）Sources源代码资源面板" class="headerlink" title="（4）Sources源代码资源面板"></a>（4）Sources源代码资源面板</h4><p>​          调试JavaScript页面源代码，进行断点调试代码</p><h4 id="（5）Application应用面板"><a href="#（5）Application应用面板" class="headerlink" title="（5）Application应用面板"></a>（5）Application应用面板</h4><p>​            查看&amp;调试客户端存储，如Cookie,LocalStorage,SessionStorage等</p><h4 id="（6）Performance性能面板"><a href="#（6）Performance性能面板" class="headerlink" title="（6）Performance性能面板"></a>（6）Performance性能面板</h4><p>​            查看页面性能细节，细粒度对网页载入进行性能优化（高阶)</p><h4 id="（7）Memory内存面板"><a href="#（7）Memory内存面板" class="headerlink" title="（7）Memory内存面板"></a>（7）Memory内存面板</h4><p>​             JavaScript CPU分析器，内存堆分析器（高阶)</p><h4 id="（8）Security安全面板"><a href="#（8）Security安全面板" class="headerlink" title="（8）Security安全面板"></a>（8）Security安全面板</h4><p>​            查看页面安全及证书问题（高阶)</p><h4 id="（9）Lighthouse-Audits-面板"><a href="#（9）Lighthouse-Audits-面板" class="headerlink" title="（9）Lighthouse(Audits)面板"></a>（9）Lighthouse(Audits)面板</h4><p>​            使用Google Lighthouse辅助性能分析，给出优化建议（高阶)</p><h2 id="二-Chrome-DevTools-使用技巧"><a href="#二-Chrome-DevTools-使用技巧" class="headerlink" title="二.Chrome DevTools 使用技巧"></a>二.Chrome DevTools 使用技巧</h2><h3 id="1-有关css方面"><a href="#1-有关css方面" class="headerlink" title="1.有关css方面"></a>1.有关css方面</h3><h4 id="1-样式定位到CSS"><a href="#1-样式定位到CSS" class="headerlink" title="(1)样式定位到CSS"></a>(1)样式定位到CSS</h4><p>项目DOM层级是比较复杂（深），例如<code>font-size</code>这一样式属性，就可能存在多层覆盖，我们必须定位到最终表现生效的CSS，才能做出有效修改。</p><ol><li>在<code>Computed</code>面板中的<code>filter</code>输入框筛选样式属性名</li><li>展开属性，看到多处定义，且只有第一行生效</li><li>鼠标hover时，左侧显示<code>-&gt;</code>，点击可跳转到<code>Styles</code>面板中的CSS规则</li><li>可在生效的CSS规则中修改样式</li></ol><img src="/2022/011428074/image1.png" class=""><h4 id="2-颜色选择器"><a href="#2-颜色选择器" class="headerlink" title="(2)颜色选择器"></a>(2)颜色选择器</h4><p>​     在调试CSS中，设置颜色相关属性的值，可以通过Chrome提供的颜色选择器，动态修改颜色。</p><ol><li>找到CSS中设置颜色的属性</li><li>点击颜色值左侧的选择器（彩色方块）</li></ol><img src="/2022/011428074/%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8.png" class=""><h4 id="3-阴影选择器"><a href="#3-阴影选择器" class="headerlink" title="(3)阴影选择器"></a>(3)阴影选择器</h4><p>阴影选择器用于<code>box-shadow</code>属性，可以直接通过选择器可视化调整。</p><ol><li>点击<code>box-shadow</code>属性右侧的“层叠偏移图标”，弹出阴影选择器</li><li>通过颜色选择器面板可设置横纵轴偏移量、阴影模糊度和扩散度、内外阴影</li></ol><img src="/2022/011428074/%E9%98%B4%E5%BD%B1%E9%80%89%E6%8B%A9%E5%99%A8.png" class=""><h4 id="4-CSS属性值快速调整"><a href="#4-CSS属性值快速调整" class="headerlink" title="(4)CSS属性值快速调整"></a>(4)CSS属性值快速调整</h4><p>鼠标滚轮可以实现css属性值的微调或快速调整，比如字体大小、旋转角度、宽高数值等 鼠标滚轮不只是+-1</p><ol><li>+-0.1：<code>Option</code>+鼠标滚轮，windows系统是<code>Alt</code>+滚轮</li><li>+-1：滚轮前后滚动</li><li>+-10：<code>Shift</code>+鼠标滚轮</li><li>+-100：<code>Command</code>+鼠标滚轮，Windows系统是<code>Ctrl</code>+滚轮</li></ol><h4 id="5-animation动画调试"><a href="#5-animation动画调试" class="headerlink" title="(5)animation动画调试"></a>(5)animation动画调试</h4><p>某些元素动画效果可以通过“帧动画”、<code>transition</code>实现，开发实现过程中的代码过于抽象，实际上还是得在浏览器中查看效果。Chrome开发工具提供了针对animation的调试面板。该面板可提供动画重播、暂停、预览、修改 操作方法：</p><ol><li>打开控制台，键盘按“ESC”，调出Console面板</li><li>点击Console面板左上角“竖三点”，弹出菜单选择“Animations”，即可打开动画调试面板</li></ol><p>在动画面板可以看到帧动画的名称和对应DOM节点，点击第一列的DOM节点，可以快速定位到Elements面板中DOM所在位置，同时Styles面板也会更新，可滚动Styles面板到底部即可看到已定义的“帧动画” 动画面板的作用：</p><ul><li>定位动画作用的DOM结构</li><li>控制动画执行过程：播放、暂停、重播、减速动画、控制执行时间</li><li>预览动画执行过程、动画时间曲线</li><li>侦听记录所有动画过程</li></ul><h2 id="2-模拟网速和禁止缓存"><a href="#2-模拟网速和禁止缓存" class="headerlink" title="2. 模拟网速和禁止缓存"></a><strong>2. 模拟网速和禁止缓存</strong></h2><img src="/2022/011428074/%E6%A8%A1%E6%8B%9F%E7%BD%91%E9%80%9F.png" class=""><p>Online里面的选项：</p><ul><li>Fast 3G，模拟很快的3G网络</li><li>Slow 3G，模拟很慢的3G网络</li><li>Offline，模拟断网的情况</li></ul><p>这个也可以自己调节，在DevTools 中的网络选项卡中，可以看到每个功能、操作或文件加载需要多长时间。也可以使用网络选项卡来模拟缓慢的网络连接，使用 <code>Network Throttling</code> 就可以做到这点。</p><img src="/2022/011428074/%E8%B0%83%E8%8A%82%E7%BD%91%E9%80%9F.webp" class=""><p>添加和选择这个配置文件后，剩下要做的就是刷新页面，看看它在糟糕的网络连接下的表现。</p><h2 id="3-使用设计模式"><a href="#3-使用设计模式" class="headerlink" title="3.使用设计模式"></a>3.使用设计模式</h2><p>另一个 CSS 和设计技巧是使用设计模式直接编辑网站上的内容，不需要修改 HTML 和 CSS 源文件，只需点击/高亮页面上的内容，就可以修改它。要开启这个模式，只需在控制台中输入 <code>document.designMode = "on"</code>或者 <code>document.body.contentEditable = "true"</code>即可。</p><img src="/2022/011428074/%E4%BD%BF%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.webp" class=""><h2 id="4-用预置或自定义地址重写地理位置"><a href="#4-用预置或自定义地址重写地理位置" class="headerlink" title="4.用预置或自定义地址重写地理位置"></a>4.用预置或自定义地址重写地理位置</h2><p>JavaScript 可以这样获取你的地理位置：</p><pre><code>navigator.geolocation.getCurrentPosition(console.log)</code></pre><p>在 Chrome DevTools 的 Sensors 面板中，你可以用预置的或者自己定义的地址重写经纬度。该功能可以用来调试使用地理位置的页面。操作如下：</p><ul><li>打开 <code>Sensor</code> 面板（如图操作或快捷键 <code>Ctrl Shift P</code> 输入 <code>sensor</code> 回车）</li><li>选择一个预置地址或点击 <code>Manage</code> 自定义新的地址（地名，经纬度）</li><li>在 <code>Console</code> 面板下输入 <code>navigator.geolocation.getCurrentPosition(console.log)</code> 观察地址变化。</li></ul><h2 id="5-从-Console-Violations-获取性能建议"><a href="#5-从-Console-Violations-获取性能建议" class="headerlink" title="5.从 Console Violations 获取性能建议"></a>5.从 Console Violations 获取性能建议</h2><p>Console Violations 会给你提示针对你代码的最佳实践。使用该功能的好处就是，不需要去运行 <code>Performance</code>  ，因为违规代码执行的时候就会显示相应的Violations，如强制回流的 JavaScript，使用了 <code>document.write</code> 的 JavaScript，执行缓慢的 <code>setTimeout </code>处理程序，效率低下的时间侦听器等等 。操作如下：</p><ul><li>在 <code>Console</code> 面板中点击 <code>Default levels</code> 下拉框，选择 <code>Verbose</code></li><li>在过滤框中输入<code> violation</code></li></ul><h2 id="6-代码覆盖率检测"><a href="#6-代码覆盖率检测" class="headerlink" title="6.代码覆盖率检测"></a>6.代码覆盖率检测</h2><p>项目时间久了，会有很多冗余代码是从来不会执行的，或是需要做首屏加载优化，想把首屏用不到的js和css 代码抽取出来做异步加载，使用chrome自带的coverage检测工具可以很方便的看到哪些代码被执行了，红色表示未被执行的代码。做首屏优化时可以抽取出来做异步加载，如果你把所有的用例都跑完了，这行代码还是红色的，则可以从容的删除这些红色的代码。</p><p>code coverage面板默认是不显示的，需要在more tools 菜单中打开</p><h3 id="7-Console的理解"><a href="#7-Console的理解" class="headerlink" title="7.Console的理解"></a>7.<strong>Console</strong>的理解</h3><p>当Debug的时候，咱们绝大部分时间是在和Console打交道。咱们每每在代码中插入不少Console log()，经过打印变量值来debug。鉴于Console对于咱们这么重要，颇有必要了解全部开发者工具提供的相关的APIs和快捷键。</p><p><strong>(1). 打印对象</strong></p><p>在使用<code>console.log();的时候，不只仅打印变量，而是要打印对象，用大括号(</code>{}`)将变量包围起来。这样的优势是不只会把变量的值打印，同时还会将变量名打印出来。</p><p>![打印对象](Chrome DevTools技巧\打印对象.png)</p><p> <strong>(2)使用console.table来打印多条目数据</strong></p><p>要打印的变量是一个数组，每个元素都是一个对象。使用<code>console.table</code>来打印，其表格化的呈现更加美观易读。</p><p>![打印多条数据](Chrome DevTools技巧\打印多条数据.jpg)</p><p><strong>(3)给log加点颜色</strong></p><p>log有时候变得很是多，包含你本身的、一些第三方扩展或者浏览器的logs。除了使用过滤器(filter)之外，你还可使用颜色来更好地区分。</p><ul><li><code>console.log</code></li><li><code>console.info</code></li><li><code>console.debug</code></li><li><code>console.warn</code></li><li><code>console.error</code></li></ul><p>可以自定义自己的日志样式，例如：</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'%cconsole.log'</span><span class="token punctuation">,</span> <span class="token string">'color: green;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'%cconsole.info'</span><span class="token punctuation">,</span> <span class="token string">'color: green;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">'%cconsole.debug'</span><span class="token punctuation">,</span> <span class="token string">'color: green;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'%cconsole.warn'</span><span class="token punctuation">,</span> <span class="token string">'color: green;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'%cconsole.error'</span><span class="token punctuation">,</span> <span class="token string">'color: green;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token string">'Nothing here %cHi Cat %cHey Bear'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Console Message</span>  <span class="token string">'color: blue'</span><span class="token punctuation">,</span> <span class="token string">'color: red'</span> <span class="token comment" spellcheck="true">// CSS Style</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/logcolor.png">![log加颜色g](Chrome DevTools技巧\log加颜色.jpg)</a></p><p><strong>(4)计时功能</strong></p><p>使用<code>Console.time()</code>和<code>Console.timeEnd()</code>包裹需要计时的代码片段，输出运行这段代码的事件。</p><ul><li><code>Console.time()</code>中的参数作为计时器的标识，具有唯一性。</li><li><code>Console.timeEnd()</code>中的参数来结束此标识的计时器，并以毫秒为单位返回运行时间。</li><li>最多同时运行10000个计时器。</li></ul><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"Chrome中循环1000次的时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"Chrome中循环1000次的时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>(5)性能分析</strong></p><p>使用<code>Console.profile()</code>进行性能分析，查看代码各部分运行消耗的时间，在Chrome自带的调试工具中并没有找到在哪里查看这两个方法生成的分析报告。应该需要其他的调试工具。</p><p>具体参考这里：<br><a href="https://link.segmentfault.com/?url=http://www.oschina.net/translate/performance-optimisation-with-timeline-profiles">http://www.oschina.net/transl…</a></p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
            <tag> Chrome开发技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vr场景制作</title>
      <link href="/2022/011422321.html"/>
      <url>/2022/011422321.html</url>
      
        <content type="html"><![CDATA[<h1 id="vr全景制作方法"><a href="#vr全景制作方法" class="headerlink" title="vr全景制作方法"></a>vr全景制作方法</h1><h2 id="1-3D引擎——threejs-https-github-com-mrdoob-three-js"><a href="#1-3D引擎——threejs-https-github-com-mrdoob-three-js" class="headerlink" title="1.3D引擎——threejs,https://github.com/mrdoob/three.js"></a>1.3D引擎——threejs,<a href="https://github.com/mrdoob/three.js">https://github.com/mrdoob/three.js</a></h2><h2 id="2-css3d引擎，https-github-com-shrekshrek-css3d-engine"><a href="#2-css3d引擎，https-github-com-shrekshrek-css3d-engine" class="headerlink" title="2.css3d引擎，https://github.com/shrekshrek/css3d-engine"></a>2.css3d引擎，<a href="https://github.com/shrekshrek/css3d-engine">https://github.com/shrekshrek/css3d-engine</a></h2><p>优势：基于div+css3实现，相对于canvas webgl拥有更好的兼容性</p><p>劣势：渲染性能相比canvas  webgl要弱，只适合创建较小的三维面片场景</p><p>但是只有14k，相比那些动辄300-400的大型3d库，这是个非常小巧实用的辅助支持库</p>]]></content>
      
      
      <categories>
          
          <category> vr制作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vr </tag>
            
            <tag> 3d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端处理图片模糊</title>
      <link href="/2022/011436274.html"/>
      <url>/2022/011436274.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端处理图片模糊"><a href="#前端处理图片模糊" class="headerlink" title="前端处理图片模糊"></a>前端处理图片模糊</h1><h2 id="方案一：css3滤镜处理"><a href="#方案一：css3滤镜处理" class="headerlink" title="方案一：css3滤镜处理"></a>方案一：css3滤镜处理</h2><p> 在CSS3 中规定了一个新的图形特效：filter ，可以对元素进行模糊、锐化或者元素变色。 filter 目的是用来调整图片、背景和边界的渲染。</p><p>  在CSS3 中已经实现了filter 的一些预定义函数</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter#browser_compatibility">https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter#browser_compatibility</a></p><p>其中blur() 就是对元素进行高斯模糊，顺便添加了brightness() 函数增加前景背景明暗对比度。</p><style>    .blur {         -webkit-filter: blur(50px);        -moz-filter: blur(50px);         -ms-filter: blur(50px);         filter: blur(50px);    }</style><p><strong>注</strong>：</p><ol><li> IE 没有实现CSS3 的filter ，因为它们本来就有自己的filter 滤镜实现。IE 中的filter 实现了和CSS3 中 filter 类似的方法，但是filter 方法的调用却与CSS3 中的filter 方法不太一样。CSS3 中的filter 比IE 更切合的方式实现了这些方法，添加上IE 中的高斯模糊实现：</li></ol><pre class=" language-js"><code class="language-js">filter<span class="token punctuation">:</span> progid<span class="token punctuation">:</span>DXImageTransform<span class="token punctuation">.</span>Microsoft<span class="token punctuation">.</span><span class="token function">Blur</span><span class="token punctuation">(</span>PixelRadius<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> MakeShadow<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE6~IE9 */</span></code></pre><p>​          IE10、IE11是不支持CSS 中 filter 的语法的。</p><p>   2.容器外范围变模糊：给父容器加overflow:hidden；</p><p>​      周边泛白：给目标添加 transform: scale(1.2);  放大为原来的1.2倍，泛白的部分就可以隐藏起来看不见了。</p><h2 id="方案二：HTML5-之-canvas"><a href="#方案二：HTML5-之-canvas" class="headerlink" title="方案二：HTML5 之 canvas"></a>方案二：HTML5 之 canvas</h2><p> canvas 中有一个getImageData() 方法，可以获取图片上的像素点信息，还有一个方法putImageData() 可以将图像的像素点信息修改后写入到canvas 上，canvas 也提供了方法toDataURL() 将图像信息导出成路径供其它用处（譬如作为其他元素的背景）</p><p>我们要使用的是高斯模糊的JS插件——StackBlur.js</p><p>  该插件可以实现高斯模糊效果，主要使用里面的方法</p><blockquote><p>function stackBlurImage( imageID, canvasID, radius, blurAlphaChannel )</p></blockquote><p>​         imageID 是html 页面中要高斯模糊的原图片标签ID，</p><p>​         canvasID 是canvas 画图的ID，</p><p>​         radius 是要高斯模糊的半径，</p><p>​         blurAlphaChannel 将其设置为true</p><h3 id="图像作为源"><a href="#图像作为源" class="headerlink" title="图像作为源:"></a>图像作为源:</h3><pre><code> StackBlur.image(sourceImage, targetCanvas, radius, blurAlphaChannel);</code></pre><ul><li><strong>sourceImage：</strong>HTMLImageElement或者它的id</li><li><strong>targetCanvas：</strong>HTMLCanvasElement或者它的id</li><li><strong>radius：</strong>模糊半径</li><li><strong>blurAlphaChannel：</strong> 如果你想模糊一个 RGBA 的图像，就将其设置为true（可选，默认 =false）</li></ul><h3 id="RGBA-Canvas-作为源"><a href="#RGBA-Canvas-作为源" class="headerlink" title="RGBA Canvas 作为源:"></a>RGBA Canvas 作为源:</h3><pre><code>StackBlur.canvasRGBA(targetCanvas, top_x, top_y, width, height, radius);</code></pre><ul><li><strong>targetCanvas:</strong> HTMLCanvasElement</li><li><strong>top_x:</strong> 要模糊的矩形的左上角的水平坐标</li><li><strong>top_y:</strong> 要模糊的矩形的左上角的垂直坐标</li><li><strong>width:</strong> 要模糊的矩形宽度</li><li><strong>height:</strong> 要模糊的矩形高度</li><li><strong>radius:</strong> 模糊半径</li></ul><h3 id="RGB-Canvas-作为源"><a href="#RGB-Canvas-作为源" class="headerlink" title="RGB Canvas 作为源:"></a>RGB Canvas 作为源:</h3><pre><code>StackBlur.canvasRGB(targetCanvas, top_x, top_y, width, height, radius);</code></pre><ul><li><strong>targetCanvas:</strong> HTMLCanvasElement</li><li><strong>top_x:</strong> 要模糊的矩形的左上角的水平坐标</li><li><strong>top_y:</strong> 要模糊的矩形的左上角的垂直坐标</li><li><strong>width:</strong> 要模糊的矩形宽度</li><li><strong>height:</strong> 要模糊的矩形高度</li><li><strong>radius:</strong> 模糊半径</li></ul><h3 id="RGBA-ImageData-作为源"><a href="#RGBA-ImageData-作为源" class="headerlink" title="RGBA ImageData 作为源:"></a>RGBA ImageData 作为源:</h3><pre><code>StackBlur.imageDataRGBA(imageData, top_x, top_y, width, height, radius);</code></pre><ul><li><strong>imageData:</strong> canvas 的ImageData</li><li><strong>top_x：</strong>要模糊的矩形的左上角的水平坐标</li><li><strong>top_y:</strong> 要模糊的矩形的左上角的垂直坐标</li><li><strong>width:</strong> 要模糊的矩形宽度</li><li><strong>height:</strong> 要模糊的矩形高度</li><li><strong>radius:</strong> 模糊半径</li></ul><h3 id="RGB-ImageData-作为源"><a href="#RGB-ImageData-作为源" class="headerlink" title="RGB ImageData 作为源:"></a>RGB ImageData 作为源:</h3><pre><code>StackBlur.imageDataRGB(imageData, top_x, top_y, width, height, radius);</code></pre><ul><li><strong>imageData:</strong> canvas 的ImageData</li><li><strong>top_x：</strong>要模糊的矩形的左上角的水平坐标</li><li><strong>top_y:</strong> 要模糊的矩形的左上角的垂直坐标</li><li><strong>width:</strong> 要模糊的矩形宽度</li><li><strong>height:</strong> 要模糊的矩形高度</li><li><strong>radius:</strong> 模糊半径</li></ul><p>​    将canvas 画图作为其他元素的背景：<a href="https://imququ.com/post/use-canvas-as-background-image.html">使用canvas 绘制背景图</a> </p><p>​     马赛克图片处理插件：<a href="http://www.htmleaf.com/html5/html5-canvas/201502021314.html">canvas 生成马赛克图片</a> </p><p>​     高斯模糊算法——<a href="http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html">高斯模糊算法</a></p><p>​     局部实现高斯模糊 ——<a href="https://www.jb51.net/article/151506.html">https://www.jb51.net/article/151506.html</a></p><h2 id="方案三：SVG高斯模糊"><a href="#方案三：SVG高斯模糊" class="headerlink" title="方案三：SVG高斯模糊"></a>方案三：SVG高斯模糊</h2><p>  SVG 是用XML格式定义在Web 平台上的矢量图，它是一个开放标准，它将图像信息以XML 文本形式进行保存和传输，SVG 里也提供了滤镜来该表元素的显示，其中包括高斯模糊。我们先来看看SVG 的浏览器兼容性：</p><img src="/2022/011436274/image.jpg" class=""><p>根据 <a href="http://know.webhek.com/svg/svg-blur-effects.html">SVG 的教程</a> 中的介绍，SVG 滤镜主要使用了<defs> 和<filter> 标记。保存一个名为 blur.svg 的SVG 文件，文件内容如下：</filter></defs></p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span>           <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>ev</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/xml-events<span class="token punctuation">"</span></span>               <span class="token attr-name">baseProfile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blur<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feGaussianBlur</span> <span class="token attr-name">stdDeviation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>191<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>265<span class="token punctuation">"</span></span> <span class="token attr-name">filter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url(#blur)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></code></pre><p>提供了一个高斯模糊滤镜（模糊半径为10），<img> 标记提供了要模糊的图片，属性 xlink:href 是图片的地址，属性 filter 根据ID 应用了代码定义的滤镜，然后SVG 作为背景图片载入：</p><blockquote><p>.blur {   background-image: url(blur.svg); }</p></blockquote><p>这样就达到了我们的目的——高斯模糊图片</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
            <tag> css3 </tag>
            
            <tag> svg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号开发</title>
      <link href="/2022/011424686.html"/>
      <url>/2022/011424686.html</url>
      
        <content type="html"><![CDATA[<h1 id="微信公众号开发"><a href="#微信公众号开发" class="headerlink" title="微信公众号开发"></a>微信公众号开发</h1><h2 id="一、微信公众号的接入-三个部分"><a href="#一、微信公众号的接入-三个部分" class="headerlink" title="一、微信公众号的接入(三个部分)"></a>一、微信公众号的接入(三个部分)</h2><h3 id="1-node-服务器；"><a href="#1-node-服务器；" class="headerlink" title="1.node 服务器；"></a>1.node 服务器；</h3><h3 id="2-将本地的-node-服务暴露到外网；"><a href="#2-将本地的-node-服务暴露到外网；" class="headerlink" title="2.将本地的 node 服务暴露到外网；"></a>2.将本地的 node 服务暴露到外网；</h3><p>​ <a href="https://www.xiaomy.net/">本项目所使用的外网映射软件(免费)</a></p><img src="/2022/011424686/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE.png" class=""><h3 id="3-微信公众号信息验证"><a href="#3-微信公众号信息验证" class="headerlink" title="3.微信公众号信息验证"></a>3.微信公众号信息验证</h3><p>进入微信公众号的开发文档，选择开始开发，接口测试号申请。</p><p>当我们点提交的时候，微信服务器会给我们填写的 URL 地址发送一个 get 请求，并传回一些特定的字段。就是下图这些参数，我们需要把这些参数跟微信服务去验证。</p><p>设置完之后，可以诊断一下是否成功。</p><img src="/2022/011424686/image-20210906102922834.png" class=""><p>这里引入了一个新的模块 sha1，主要是对结果进行加密的。我们再到微信测试号配置设置就可以成功保存了，验证成功可以开始正式的开发了。</p><img src="/2022/011424686/%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E9%AA%8C%E8%AF%81%E6%96%B9%E6%B3%95.png" class=""><p>​ 微信授权验证方法</p><h2 id="二、临时素材上传"><a href="#二、临时素材上传" class="headerlink" title="二、临时素材上传"></a>二、临时素材上传</h2><p>对于与微信公众号，我们可能不仅仅只是发文本，我们还需要发语音，视频之类的各种素材。</p><p>从微信文档上可以看出，是 post 请求，然后传递文档流给微信服务器。</p><h3 id="1-先配置好-config-文件。"><a href="#1-先配置好-config-文件。" class="headerlink" title="(1)先配置好 config 文件。"></a>(1)先配置好 config 文件。</h3><img src="/2022/011424686/config%E6%96%87%E4%BB%B6.png" class=""><h3 id="2-然后给-WeChat-添加一个素材上传的方法。"><a href="#2-然后给-WeChat-添加一个素材上传的方法。" class="headerlink" title="(2)然后给 WeChat 添加一个素材上传的方法。"></a>(2)然后给 WeChat 添加一个素材上传的方法。</h3><img src="/2022/011424686/%E4%B8%B4%E6%97%B6%E7%B4%A0%E6%9D%90%E4%B8%8A%E4%BC%A0.png" class=""><h3 id="3-被动回复信息。"><a href="#3-被动回复信息。" class="headerlink" title="(3)被动回复信息。"></a>(3)被动回复信息。</h3><img src="/2022/011424686/msg%E6%96%87%E4%BB%B6.png" class=""><img src="/2022/011424686/%E8%A2%AB%E5%8A%A8%E5%9B%9E%E5%A4%8D%E4%BF%A1%E6%81%AF.png" class=""><h3 id="注：获取-access-token"><a href="#注：获取-access-token" class="headerlink" title="注：获取 access_token"></a>注：获取 access_token</h3><img src="/2022/011424686/access_token%E6%96%87%E4%BB%B6.png" class=""><img src="/2022/011424686/%E8%8E%B7%E5%8F%96access_token.png" class=""><p>至此上传素材完成。素材上传的过程中主要有一点需要注意一下，post 请求的时候，需要给微信服务发送一个流文件，发送成功之后，服务器会返回一个 media_id。</p><p>这个 mdedia_id 就是该素材的 id,后面如果我们需要对素材进行其他操作，都是这个 id。</p>]]></content>
      
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公众号开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页性能管理</title>
      <link href="/2022/011224686.html"/>
      <url>/2022/011224686.html</url>
      
        <content type="html"><![CDATA[<h1 id="网页性能管理"><a href="#网页性能管理" class="headerlink" title="网页性能管理"></a>网页性能管理</h1><h2 id="一、必要性"><a href="#一、必要性" class="headerlink" title="一、必要性"></a>一、<strong>必要性</strong></h2><p> 如果一个网页响应非常缓慢，占用大量的CPU和内存，浏览起来常常有卡顿，页面的动画效果也不流畅。对于用户：会关闭这个页面，改为访问其他网站。所以作为一个开发者，肯定不愿意看到这种情况，必须要提高性能。</p><h3 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.<strong>目的</strong></h3><p>提高网页性能。</p><h3 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.<strong>原因</strong></h3><h4 id="网页生成过程-五步-："><a href="#网页生成过程-五步-：" class="headerlink" title="网页生成过程(五步)："></a>网页生成过程(五步)：</h4><ol><li><p>HTML代码转化成DOM</p></li><li><p>CSS代码转化成CSSOM（CSS Object Model）</p></li><li><p>结合DOM和CSSOM，生成一棵渲染树</p></li><li><p>生成布局（layout），即将所有渲染树的所有节点进行平面合成</p></li><li><p>将布局绘制（paint）在屏幕上</p><p>这五步里面，第一步到第三步都非常快，耗时的是第四步和第五步。</p><p>“生成布局”（flow）和”绘制”（paint）这两步，合称为”渲染”（render）  </p><p>网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。</p><p>以下三种情况，会导致网页重新渲染。</p><blockquote><ul><li>修改DOM</li><li>修改样式表</li><li>用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）</li></ul></blockquote></li></ol><p>重排和重绘会不断触发，这是不可避免的。但是，它们非常耗费资源，是导致网页性能低下的<strong>根本原因</strong></p><h3 id="3-方向"><a href="#3-方向" class="headerlink" title="3.方向"></a>3.<strong>方向</strong></h3><p>提高网页性能，就是要降低”重排”和”重绘”的频率和成本，尽量少触发重新渲染。</p><h2 id="二、做法"><a href="#二、做法" class="headerlink" title="二、做法"></a>二、<strong>做法</strong></h2><p>因为DOM变动和样式变动，都会触发重新渲染。而现在浏览器会尽量把所有的变动集中在一起，排成一个队列，然后一次性执行，尽量避免多次重新渲染。</p><blockquote><pre class=" language-javascript"><code class="language-javascript">div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token string">'30px'</span><span class="token punctuation">;</span></code></pre></blockquote><p>上面代码中，div元素有两个样式变动，但是浏览器只会触发一次重排和重绘。</p><p>如果写得不好，就会触发两次重排和重绘。</p><blockquote><pre class=" language-javascript"><code class="language-javascript">div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span><span class="token keyword">var</span> margin <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop<span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginTop <span class="token operator">=</span> <span class="token punctuation">(</span>margin <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span></code></pre></blockquote><p>上面代码对div元素设置背景色以后，第二行要求浏览器给出该元素的位置，所以浏览器不得不立即重排。</p><p>一般来说，样式的写操作之后，如果有下面这些属性的读操作，都会引发浏览器立即重新渲染。</p><blockquote><ul><li>offsetTop/offsetLeft/offsetWidth/offsetHeight</li><li>scrollTop/scrollLeft/scrollWidth/scrollHeight</li><li>clientTop/clientLeft/clientWidth/clientHeight</li><li>getComputedStyle()</li></ul></blockquote><p>所以，从性能角度考虑，尽量不要把读操作和写操作，放在一个语句里面。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// bad</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span><span class="token keyword">var</span> left <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token keyword">var</span> top  <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span></code></pre></blockquote><p>一般的规则是：</p><blockquote><ul><li>样式表越简单，重排和重绘就越快。</li><li>重排和重绘的DOM元素层级越高，成本就越高。</li><li>table元素的重排和重绘成本，要高于div元素</li></ul></blockquote><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a><strong>三、方法</strong></h2><p>有一些JavaScript方法可以调节重新渲染，大幅提高网页性能。</p><h6 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame()"></a>window.requestAnimationFrame()</h6><p>window.requestAnimationFrame() 方法。它可以将某些代码放到下一次重新渲染时执行。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doubleHeight</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> currentHeight <span class="token operator">=</span> element<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token punctuation">(</span>currentHeight <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>doubleHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><p>上面的代码使用循环操作，将每个元素的高度都增加一倍。可是，每次循环都是，读操作后面跟着一个写操作。这会在短时间内触发大量的重新渲染，显然对于网页性能很不利。</p><p>我们可以使用<code>window.requestAnimationFrame()</code>，让读操作和写操作分离，把所有的写操作放到下一次重新渲染。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doubleHeight</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> currentHeight <span class="token operator">=</span> element<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token punctuation">(</span>currentHeight <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>doubleHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h6 id="window-requestIdleCallback"><a href="#window-requestIdleCallback" class="headerlink" title="window.requestIdleCallback()"></a>window.requestIdleCallback()</h6><p>函数<a href="https://w3c.github.io/requestidlecallback/">window.requestIdleCallback()</a>，也可以用来调节重新渲染。</p><p>它指定只有当一帧的末尾有空闲时间，才会执行回调函数。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><p>上面代码中，只有当前帧的运行时间小于16.66ms时，函数fn才会执行。否则，就推迟到下一帧，如果下一帧也没有空闲时间，就推迟到下下一帧，以此类推。</p><p>它还可以接受第二个参数，表示指定的毫秒数。如果在指定 的这段时间之内，每一帧都没有空闲时间，那么函数fn将会强制执行。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><p>上面的代码表示，函数fn最迟会在5000毫秒之后执行。</p><h2 id="四、技巧"><a href="#四、技巧" class="headerlink" title="四、技巧"></a><strong>四、技巧</strong></h2><p>第一条，DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</p><p>第二条，如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</p><p>第三条，不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。</p><blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// bad</span><span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> top <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top  <span class="token operator">=</span> top  <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good </span>el<span class="token punctuation">.</span>className <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">" theclassname"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// good</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"; left: "</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token string">"px; top: "</span> <span class="token operator">+</span> top <span class="token operator">+</span> <span class="token string">"px;"</span><span class="token punctuation">;</span></code></pre></blockquote><p>第四条，尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。</p><p>第五条，先将元素设为 display: none （需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</p><p>第六条，position属性为absolute或fixed的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</p><p>第七条，只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，visibility : hidden 的元素只对重排有影响，不影响重绘。</p><p>第八条，使用虚拟DOM的脚本库，比如React等。</p><p>第九条，使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 网页设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
